import {Component, OnDestroy, OnInit} from '@angular/core';
import {ActivatedRoute, Router} from '@angular/router';
import { ToastController } from '@ionic/angular';
import { ScreenOrientation } from '@ionic-native/screen-orientation/ngx';
import { AndroidFullScreen } from '@ionic-native/android-full-screen/ngx';
import {ModalController, NavController} from '@ionic/angular';
import {RouterPage} from '../../helpers/RouterPage';
import { TabsPage } from '../../tabline/tab';
import {QuizzesService} from '../../services/quizzes.service';
import {HandleService} from '../../services/handle.service';
import {LoadingPreference} from '../../preferences/LoadingPreference';
import AppParams from '../../params';
import {MainQuizComponent} from '../../modals/quizzes/main-quiz/main-quiz.component';
import {QuizStartConfirmationComponent} from '../../modals/quizzes/quiz-start-confirmation/quiz-start-confirmation.component';

@Component({
  selector: 'app-quizzes',
  templateUrl: './quizzes.page.html',
  styleUrls: ['./quizzes.page.scss'],
})
export class QuizzesPage extends RouterPage implements OnInit, OnDestroy {

  autoGeneratedQuizzes: any[] = [];
  topQuizzes: any;
  appParams = AppParams;
  constructor(
      public toastController: ToastController,
      private screenOrientation: ScreenOrientation,
      private quizzesService: QuizzesService,
      private loadingPref: LoadingPreference,
      private androidFullScreen: AndroidFullScreen,
      private router: Router,
      public modalController: ModalController,
      private navCtrl: NavController,
      private route: ActivatedRoute,
      private handler: HandleService,
      public tabs: TabsPage,
  ) {
    super(router, route);
  }

  async onEnter() {
    const loading = await this.loadingPref.make();
    loading.present();

    await this.getAllQuizzes();

    loading.dismiss();
  }

  ngOnInit() {
  }

  getAllQuizzes() {
    return new Promise((resolve, reject) => {
      let loading = true;
      this.handler.run(this.quizzesService.getFundamentals())
          .then((res: any) => {
            this.autoGeneratedQuizzes = res.fundamentalsAutogenerated;
            if (loading) {
              loading = false;
            } else {
              resolve();
            }
          })
          .catch((err) => {
            this.handler.presentAlert(err.error.message, err);
          });

      this.handler.run(this.quizzesService.getTopQuizzes())
          .then((res: any) => {
            this.topQuizzes = res;
            if (loading) {
              loading = false;
            } else {
              resolve();
            }
          })
          .catch((err) => {
            this.handler.presentAlert(err.error.message, err);
          });
    });
  }

  async goToQuiz(quizId: string) {
    try {
      const modal = await this.modalController.create({
        component: MainQuizComponent,
        componentProps: {quizId}
      });
      return await modal.present();
    } catch (e) {
      this.handler.presentAlert(e.error.message, e);
    }
  }

  async openTopQuiz(quiz) {
    if (quiz.passed) {
      const toast = await this.toastController.create({
        message: 'This quiz is not available yet.',
        duration: 2000
      });
      return toast.present();
    }

    return this.quizStartConfirmation(quiz.id);
  }

  async quizStartConfirmation(quizId: string) {
    const loading = await this.loadingPref.make();
    loading.present();
    try {
      const quizStartData: any = await this.handler.run(this.quizzesService.getQuizStartData(quizId));
      const quizConfirmationModal = await this.modalController.create({
        component: QuizStartConfirmationComponent,
        componentProps: {
          quizData: quizStartData,
        }
      });
      quizConfirmationModal.onDidDismiss().then((accepted) => {
        if (accepted.data) {
          return this.goToQuiz(quizId);
        }
      });
      loading.dismiss();
      await quizConfirmationModal.present();
    } catch (e) {
      this.handler.presentAlert(e.error.message, e);
      loading.dismiss();
    }

  }

  makeMonsterHeight(aQuiz): string {
    const percentage = aQuiz.percentage;
    const resultPercentage = 100 - percentage;

    if (percentage === 0 ) {
      return '100%';
    }

    if (resultPercentage < 30) {
      return '30%';
    }

    if (percentage === 100) {
      return '100%';
    }

    return  resultPercentage + '%';
  }

  async ionViewDidEnter() {
    this.screenOrientation.lock(this.screenOrientation.ORIENTATIONS.LANDSCAPE);
    this.tabs.toogleTabs(false);
    try {
      await this.androidFullScreen.isImmersiveModeSupported();
      await this.androidFullScreen.immersiveMode();
    } catch (e) {
      console.log('No full screen');
    }

  }

  async ionViewDidLeave() {
    this.screenOrientation.lock(this.screenOrientation.ORIENTATIONS.LANDSCAPE);
    this.tabs.toogleTabs(true);
    this.screenOrientation.unlock();
    try {
      await this.androidFullScreen.isImmersiveModeSupported();
      await this.androidFullScreen.showSystemUI();
    } catch (e) {
      console.log('No full screen');
    }
  }

  ngOnDestroy(): void {
    super.ngOnDestroy();
  }

}
